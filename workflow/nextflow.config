manifest {
    name = '<Workflow name>'
    author = 'Mahesh Binzer-Panchal'
    homePage = ''
    description = '<Workflow description>'
    mainScript = 'main.nf'
    //  '!>=21.04.0' : Run with version 21.04.0 or higher, otherwise exit.
    nextflowVersion = '!>=21.04.0'
    version = '0.1'
}

// Default Workflow parameters
// Override them in the params.yml located in the analyses directories.
params {

    // Workflow inputs
    samples = ''

    // Workflow outputs
    results = 'results'

    // General module configuration
    multiqc_config = "$projectDir/configs/multiqc_conf.yaml"
}

timeline {
    enabled = true
    file = "${params.results}/pipeline_info/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.results}/pipeline_info/execution_report.html"
}
trace {
    enabled = true
    file = "${params.results}/pipeline_info/execution_trace.txt"
}
dag {
    enabled = true
    file = "${params.results}/pipeline_info/pipeline_dag.svg"
}

profiles {

    // A profile for the Uppmax clusters
    uppmax {
        // Uppmax NAISS compute (project) allocation
        params.project = ''
        process {
            executor = 'slurm'
            clusterOptions = "-A $params.project"
            // Use node local storage for execution.
            scratch = '$SNIC_TMP'
        }
        // Specify resources to use.
        includeConfig "$projectDir/configs/compute_resources.config"
        // Specify singularity containers to use.
        singularity.enabled = true
        singularity.envWhitelist = 'SNIC_TMP'
    }

    // A profile for the Dardel cluster at pdc
    // based on https://github.com/nf-core/configs/blob/master/conf/pdc_kth.config
    pdc_kth {
        // Uppmax NAISS compute (project) allocation
        params.project = ''
        // Custom closure to set appropriate queues on Dardel
        clusterOptionsCreator = { mem, time, cpus ->
            def opts = [ "-A $params.project ${params.clusterOptions ?: ''}" ]
            if (time < 1.d && mem <= 222.GB && cpus < 256) {
                opts << '-p shared'
            } else if (time < 1.d) {
                // Shortish
                if (mem > 222.GB) {
                    opts << '-p memory,main'
                } else {
                    opts << '-p main'
                }
            } else {
                // Not shortish
                if (mem > 222.GB) {
                    opts << '-p memory'
                } else {
                    opts << '-p long'
                }
            }
            if (!mem || mem < 6.GB) {
                // Impose minimum memory if request is below
                opts << '--mem=6G'
            }
            opts.join(' ')
        }
        process {
            executor = 'slurm'
            clusterOptions = { clusterOptionsCreator(task.memory, task.time, task.cpus) }
            beforeScript = 'module load PDC singularity'
        }
        // Specify resources to use.
        includeConfig "$projectDir/configs/compute_resources.config"
        // Specify singularity containers to use.
        singularity.enabled = true
        singularity.runOptions = '-B /cfs/klemming/'
        env {
            // Handle java logging on stdout when discovering duplicated cgroups when
            // running in singularity with Lustre mount
            JAVA_TOOL_OPTIONS = "-Xlog:disable"
        }    
    }

    // A profile for running locally with Docker
    docker_local {
        process {
            executor = 'local'
            scratch = true
        }
        includeConfig "$projectDir/configs/compute_resources.config"
        docker.enabled = true
        docker.userEmulation = true
    }

    // A profile for running locally with Singularity
    // (e.g., using an interactive Uppmax session)
    singularity_local {
        process {
            executor = 'local'
            scratch = '$SNIC_TMP'
        }
        includeConfig "$projectDir/configs/compute_resources.config"
        singularity.enabled = true
        singularity.envWhitelist = 'SNIC_TMP'
    }

}

// module configuration
includeConfig "$projectDir/configs/modules.config"
